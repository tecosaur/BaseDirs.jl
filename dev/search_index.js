var documenterSearchIndex = {"docs":
[{"location":"defaults/#Defaults","page":"Defaults","title":"Defaults","text":"","category":"section"},{"location":"defaults/","page":"Defaults","title":"Defaults","text":"From our survey of other simlar packages, we've seen a range of approaches. Trying to take the best of those, these are the defaults that BaseDirs.jl uses.","category":"page"},{"location":"defaults/#Base-directories","page":"Defaults","title":"Base directories","text":"","category":"section"},{"location":"defaults/","page":"Defaults","title":"Defaults","text":"Common Name EnvVar Linux MacOS Windows (KnownPath)\nUser data XDG_DATA_HOME ~/.local/share ~/Library/Application Support RoamingAppData\nSystem data XDG_DATA_DIRS /usr/local/share, /usr/share /Library/Application Support ProgramData\nUser config XDG_CONFIG_HOME ~/.config ~/Library/Application Support RoamingAppData\nSystem config XDG_CONFIG_DIRS /etc/xdg /Library/Application Support ProgramData\nState XDG_STATE_HOME ~/.local/state ~/Library/Application Support LocalAppData\nUser executables XDG_BIN_HOME [binhome] ~/.local/bin ~/.local/bin or /opt/local/bin or /usr/local/bin ~\\bin or RoamingAppData\\bin or AppData\\bin or pwd()\nCache XDG_CACHE_HOME ~/.cache ~/Library/Caches/ LocalAppData\\cache\nRuntime XDG_RUNTIME_DIR /run/user/$UID ~/Library/Application Support LocalAppData","category":"page"},{"location":"defaults/","page":"Defaults","title":"Defaults","text":"[binhome]: While XDG_BIN_HOME is not yet standard, it seems like the most likely name to be given to ~/.local/bin (see this issue), and I think it is worth having something rather than nothing.","category":"page"},{"location":"defaults/#User-directories","page":"Defaults","title":"User directories","text":"","category":"section"},{"location":"defaults/","page":"Defaults","title":"Defaults","text":"Common Name EnvVar Linux[xdguserdirs] MacOS Windows (KnownPath)\nDesktop XDG_DESKTOP_DIR ~/Desktop ~/Desktop Desktop\nDownload XDG_DOWNLOAD_DIR ~/Downloads ~/Downloads Downloads\nDocuments XDG_DOCUMENTS_DIR ~/Documents ~/Documents Documents\nMusic XDG_MUSIC_DIR ~/Music ~/Music Music\nPictures XDG_PICTURES_DIR ~/Pictures ~/Pictures Pictures\nVideos XDG_VIDEOS_DIR ~/Videos ~/Movies Videos\nTemplates XDG_TEMPLATES_DIR ~/Templates ~/Templates Templates\nPublic XDG_PUBLICSHARE_DIR ~/Public ~/Public Public","category":"page"},{"location":"defaults/","page":"Defaults","title":"Defaults","text":"[xdguserdirs]: In accordance with the xdg-user-dirs documentation, the system and user user-dirs.dirs files are checked before using the defaults.","category":"page"},{"location":"defaults/#Project-directories","page":"Defaults","title":"Project directories","text":"","category":"section"},{"location":"defaults/#Project-paths","page":"Defaults","title":"Project paths","text":"","category":"section"},{"location":"defaults/","page":"Defaults","title":"Defaults","text":"A project path string (henceforth given by the Project placeholder) is formatted according to the following bits of information:","category":"page"},{"location":"defaults/","page":"Defaults","title":"Defaults","text":"Qualifier (only used on mac), which defaults to org\nOrganisation/Company, which defaults to julia\nApplication/Project name, which must be provided.","category":"page"},{"location":"defaults/","page":"Defaults","title":"Defaults","text":"The operating system specific project path is composed as follows:","category":"page"},{"location":"defaults/","page":"Defaults","title":"Defaults","text":"System Project path format Example\nLinux $Name contraption\nMacOS $Qualifier.$Organisation.$Name com.ACME.contraption\nWindows $Organisation\\$Name ACME\\contraption","category":"page"},{"location":"defaults/#Project-directory-template","page":"Defaults","title":"Project directory template","text":"","category":"section"},{"location":"defaults/","page":"Defaults","title":"Defaults","text":"Common Name Linux MacOS Windows\nUser data $(User data)/$Project $(User data)/$Project $(User data)\\$Project\\data\nSystem data $(System data)/$Project $(System data)/$Project $(System data)\\$Project\\data\nUser config $(User config)/$Project $(User config)/$Project $(User config)\\$Project\\config\nSystem config $(System config)/$Project $(System config)/$Project $(System config)\\$Project\\config\nCache $(Cache)/$Project $(Cache)/$Project $(Cache)\\$Project\\cache\nState $(State)/$Project $(State)/$Project $(State)\\$Project\\state","category":"page"},{"location":"defaults/#Extra-directories","page":"Defaults","title":"Extra directories","text":"","category":"section"},{"location":"defaults/","page":"Defaults","title":"Defaults","text":"Common name Linux MacOS Windows\nFonts $(User data)/fonts, ~/.fonts, $(System data)/fonts ~/Library/Fonts, /Library/Fonts, /System/Library/Fonts, /Network/Library/Fonts Fonts\nApplications $(User data)/applications, $(System data)/applications /Applications Programs, CommonPrograms","category":"page"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/#Summary","page":"Usage","title":"Summary","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"This library works by resolving a few key directories and saving the results to variables, namely:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Data, DATA_HOME and DATA_DIRS\nConfig, with CONFIG_HOME and CONFIG_DIRS\nExecutables, with BIN_HOME\nState data, with STATE_HOME\nCached data, with CACHE_HOME\nRuntime data, with RUNTIME_DIR","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"While it is possible to use these variables directly, it is recommended that you make use of the accessor functions instead, which all follow this pattern:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"accessor() # Give the base directory(ies)\naccessor(parts...) # Give the base directory(ies) joined with parts\naccessor(proj::Project) # Give the base directory(ies) for proj\nacessors(proj::Project, parts...) # proj directory(ies) joined with parts","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Where accessor is a stand-in for the particular named directory being resolved. Two boolean keyword arguments are often supported:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"create, to create the path when it does not exist. This is different to simply piping the returned path into mkpath in that it: a. Takes care to create the base directory with the appropriate mode    (700) b. Creates the directory component of the path with the default mode    (usually 755) c. If the path is to a file (i.e. the path does not end with /),    touchâ€‹es the file.\nexistent, to filter the list of provided paths to ones that exist (when applicable)","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"To give appropriate project-specific directories we can use a BaseDirs.Project:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"BaseDirs.Project","category":"page"},{"location":"usage/#BaseDirs.Project","page":"Usage","title":"BaseDirs.Project","text":"A representation of a \"Project\", namely the essential components of naming information used to produce platform-appropriate project paths.\n\nProject(name::AbstractString;\n        org::AbstractString=\"julia\", qualifier::AbstractString=\"lang\")\n  -> Project\n\nThe information needed, and the platforms that make use of it, are as follows:\n\nname, the name of the project (Linux, MacOS, Windows)\norg (\"julia\"), the organisation the project belongs to (MacOS, Windows)\nqualifier (\"org\"), the nature of the organisation, usually a TLD (MacOS)\n\nThe resulting \"project path components\" take one of the following forms:\n\nPlatform Project path form\nLinux \"$org/$name\"\nMacOS \"$qualifier.$org.$name\"\nWindows \"$org\\$name\"\n\n\n\n\n\n","category":"type"},{"location":"usage/","page":"Usage","title":"Usage","text":"The user and system forms of the various accessor functions are split into the User and System modules, with combined accessors in the XDG namespace. This essentially creates a tree of accessor functions:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"User\ndata\nconfig\nbin\nstate\ncache\nruntime\nfonts\napplications\nSystem\ndata\nconfig\nfonts\napplications\ndata\nconfig\nfonts\napplications","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The User submodule also provides a number of other \"user folder\" accessors, namely:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"desktop\ndownloads\ndocuments\nmusic\npictures\nvideos\ntemplates\npublic","category":"page"},{"location":"usage/#Example-usage","page":"Usage","title":"Example usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia> using BaseDirs\n\njulia> BaseDirs.CONFIG_HOME[]\n\"/home/tec/.config\"\n\njulia> BaseDirs.User.config()\n\"/home/tec/.config\"\n\njulia> BaseDirs.User.config(\"sub\", \"dir/\")\n\"/home/tec/.config/sub/dir/\"\n\njulia> BaseDirs.User.config(BaseDirs.Project(\"mything\"), \"config.conf\", create=true)\n\"/home/tec/.config/mything/config.conf\"","category":"page"},{"location":"usage/#Variables","page":"Usage","title":"Variables","text":"","category":"section"},{"location":"usage/#Base-directories","page":"Usage","title":"Base directories","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"BaseDirs.DATA_HOME\nBaseDirs.DATA_DIRS\nBaseDirs.CONFIG_HOME\nBaseDirs.CONFIG_DIRS\nBaseDirs.BIN_HOME\nBaseDirs.STATE_HOME\nBaseDirs.CACHE_HOME\nBaseDirs.RUNTIME_DIR","category":"page"},{"location":"usage/#BaseDirs.DATA_HOME","page":"Usage","title":"BaseDirs.DATA_HOME","text":"DATA_HOME (XDG_DATA_HOME)\n\nThe single base directory relative to which user-specific data files should be written.\n\nDefault values\n\nLinux MacOS Windows\n~/.local/share ~/Library/ApplicationSupport RoamingAppData\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.DATA_DIRS","page":"Usage","title":"BaseDirs.DATA_DIRS","text":"DATA_DIRS (XDG_DATA_DIRS)\n\nThe set of preference ordered base directories relative to which data files should be searched.\n\nDefault values\n\nLinux MacOS Windows\n/usr/local/share /Library/ApplicationSupport ProgramData\n/usr/share  \n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.CONFIG_HOME","page":"Usage","title":"BaseDirs.CONFIG_HOME","text":"CONFIG_HOME (XDG_CONFIG_HOME)\n\nThe single base directory relative to which user-specific configuration files should be written.\n\nDefault values\n\nLinux MacOS Windows\n~/.local/config ~/Library/ApplicationSupport RoamingAppData\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.CONFIG_DIRS","page":"Usage","title":"BaseDirs.CONFIG_DIRS","text":"CONFIG_DIRS (XDG_CONFIG_DIRS)\n\nThe set of preference ordered base directories relative to which data files should be searched.\n\nDefault values\n\nLinux MacOS Windows\n/etc/xdg /Library/ApplicationSupport ProgramData\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.BIN_HOME","page":"Usage","title":"BaseDirs.BIN_HOME","text":"BIN_HOME (XDG_BIN_HOME)\n\nThe single base directory relative to which user-specific executables should be written.\n\nDefault values\n\nLinux MacOS* Windows*\n~/.local/bin ~/.local/bin \\bin\n /opt/local/bin RoamingAppData\\bin\n /usr/local/bin AppData\\bin\n  current working dir\n\n* The first of these directories that exists is used.\n\nwarning: Warning\nThis is not yet standardised by the XDG, see freedesktop.org/xdg-specs#14 for more information.\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.STATE_HOME","page":"Usage","title":"BaseDirs.STATE_HOME","text":"STATE_HOME (XDG_STATE_HOME)\n\nThe single base directory relative to which user-specific state data should be written.\n\nThis should contain  state data that should persist between (application) restarts, but that is not important or portable enough to the user that it should be stored in DATA_HOME. It may contain:\n\nactions history (logs, history, recently used files, â€¦)\ncurrent state of the application that can be reused on a restart (view, layout, open files, undo history, â€¦)\n\nDefault values\n\nLinux MacOS Windows\n~/.local/state ~/Library/ApplicationSupport LocalAppData\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.CACHE_HOME","page":"Usage","title":"BaseDirs.CACHE_HOME","text":"CACHE_HOME (XDG_CACHE_HOME)\n\nThe single base directory relative to which user-specific non-essential (cached) data should be written.\n\nDefault values\n\nLinux MacOS Windows\n~/.cache ~/Library/Caches LocalAppData\\cache\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.RUNTIME_DIR","page":"Usage","title":"BaseDirs.RUNTIME_DIR","text":"RUNTIME_DIR (XDG_RUNTIME_DIR)\n\nThe single base directory relative to which user-specific runtime files and other file objects should be placed. . Applications should use this directory for communication and synchronization purposes and should not place larger files in it.\n\nDefault values\n\nLinux MacOS Windows\n/run/user/$UID ~/Library/ApplicationSupport LocalAppData\n\n\n\n\n\n","category":"constant"},{"location":"usage/#User-directories","page":"Usage","title":"User directories","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"BaseDirs.DESKTOP_DIR\nBaseDirs.DOWNLOAD_DIR\nBaseDirs.DOCUMENTS_DIR\nBaseDirs.PICTURES_DIR\nBaseDirs.VIDEOS_DIR\nBaseDirs.TEMPLATES_DIR\nBaseDirs.PUBLICSHARE_DIR","category":"page"},{"location":"usage/#BaseDirs.DESKTOP_DIR","page":"Usage","title":"BaseDirs.DESKTOP_DIR","text":"DESKTOP_DIR (XDG_DESKTOP_DIR)\n\nThe user's desktop directory.\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.DOWNLOAD_DIR","page":"Usage","title":"BaseDirs.DOWNLOAD_DIR","text":"DOWNLOAD_DIR (XDG_DOWNLOAD_DIR)\n\nThe user's downloads directory.\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.DOCUMENTS_DIR","page":"Usage","title":"BaseDirs.DOCUMENTS_DIR","text":"DOCUMENTS_DIR (XDG_DOCUMENTS_DIR)\n\nThe user's documents directory.\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.PICTURES_DIR","page":"Usage","title":"BaseDirs.PICTURES_DIR","text":"PICTURES_DIR (XDG_PICTURES_DIR)\n\nThe user's pictures directory.\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.VIDEOS_DIR","page":"Usage","title":"BaseDirs.VIDEOS_DIR","text":"VIDEOS_DIR (XDG_VIDEOS_DIR)\n\nThe user's videos directory.\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.TEMPLATES_DIR","page":"Usage","title":"BaseDirs.TEMPLATES_DIR","text":"TEMPLATES_DIR (XDG_TEMPLATES_DIR)\n\nThe user's templates directory.\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.PUBLICSHARE_DIR","page":"Usage","title":"BaseDirs.PUBLICSHARE_DIR","text":"PUBLICSHARE_DIR (XDG_PUBLICSHARE_DIR)\n\nThe user's public directory.\n\n\n\n\n\n","category":"constant"},{"location":"usage/#Other-directories","page":"Usage","title":"Other directories","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"BaseDirs.APPLICATIONS_DIRS\nBaseDirs.FONTS_DIRS","category":"page"},{"location":"usage/#BaseDirs.APPLICATIONS_DIRS","page":"Usage","title":"BaseDirs.APPLICATIONS_DIRS","text":"APPLICATIONS_DIRS\n\nA list of locations in which application files may be found/placed.\n\n\n\n\n\n","category":"constant"},{"location":"usage/#BaseDirs.FONTS_DIRS","page":"Usage","title":"BaseDirs.FONTS_DIRS","text":"FONTS_DIRS\n\nA list of locations in which font files may be found.\n\n\n\n\n\n","category":"constant"},{"location":"usage/#Functions","page":"Usage","title":"Functions","text":"","category":"section"},{"location":"usage/#User","page":"Usage","title":"User","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"BaseDirs.User\nBaseDirs.User.data\nBaseDirs.User.config\nBaseDirs.User.bin\nBaseDirs.User.state\nBaseDirs.User.cache\nBaseDirs.User.runtime","category":"page"},{"location":"usage/#BaseDirs.User","page":"Usage","title":"BaseDirs.User","text":"BaseDirs.User\n\nThis module containes accessor functions for user-specific directories.\n\nBase directory accessors\n\nThe functions data, config, state, cache, and runtime produce a String.\n\nUser directory accessors\n\nThe functions desktop, downloads, music, videos, templates, public produce a String.\n\nOther accessors\n\nThe functions fonts and applications produce a Vector{String}.\n\nnote: Note\nUnlike the System and \"combined\" (BaseDirs.*) accessors, the Base and User accessors here return a single directory (String).\n\n\n\n\n\n","category":"module"},{"location":"usage/#BaseDirs.User.data","page":"Usage","title":"BaseDirs.User.data","text":"data(; create) -> String # the directory\ndata(parts...; create) # the directory joined with parts\ndata(proj::Project; create) # the project-specific directory\ndata(proj::Project, parts...; create) # the project-specific directory joined with parts\n\nLocate the user configuration directory. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the user configuration directory as appropriate.\n\nThe returned path is based on the variable BaseDirs.DATA_HOME, which see.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.config","page":"Usage","title":"BaseDirs.User.config","text":"config(; create) -> String # the directory\nconfig(parts...; create) # the directory joined with parts\nconfig(proj::Project; create) # the project-specific directory\nconfig(proj::Project, parts...; create) # the project-specific directory joined with parts\n\nLocate the user configuration directory. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the user configuration directory as appropriate.\n\nThe returned path is based on the variable BaseDirs.CONFIG_HOME, which see.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.bin","page":"Usage","title":"BaseDirs.User.bin","text":"bin(; create) -> String # the directory\nbin(parts...; create) # the directory joined with parts\nbin(proj::Project; create) # the project-specific directory\nbin(proj::Project, parts...; create) # the project-specific directory joined with parts\n\nLocate the executables directory. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the executables directory as appropriate.\n\nThe returned path is based on the variable BaseDirs.BIN_HOME, which see.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\n\nnote: Special behaviour\nWhen create is true and the path referrs to a file, chmod is called to ensure that all users who can read the file can execute it.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.state","page":"Usage","title":"BaseDirs.User.state","text":"state(; create) -> String # the directory\nstate(parts...; create) # the directory joined with parts\nstate(proj::Project; create) # the project-specific directory\nstate(proj::Project, parts...; create) # the project-specific directory joined with parts\n\nLocate the state data directory. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the state data directory as appropriate.\n\nThe returned path is based on the variable BaseDirs.STATE_HOME, which see.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.cache","page":"Usage","title":"BaseDirs.User.cache","text":"cache(; create) -> String # the directory\ncache(parts...; create) # the directory joined with parts\ncache(proj::Project; create) # the project-specific directory\ncache(proj::Project, parts...; create) # the project-specific directory joined with parts\n\nLocate the cached data directory. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the cached data directory as appropriate.\n\nThe returned path is based on the variable BaseDirs.CACHE_HOME, which see.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.runtime","page":"Usage","title":"BaseDirs.User.runtime","text":"state(; create) -> String # the directory\nstate(parts...; create) # the directory joined with parts\nstate(proj::Project; create) # the project-specific directory\nstate(proj::Project, parts...; create) # the project-specific directory joined with parts\n\nLocate the runtime information directory. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the runtime information directory as appropriate.\n\nThe returned path is based on the variable BaseDirs.STATE_HOME, which see.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\n\n\n\n\n\n","category":"function"},{"location":"usage/","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"BaseDirs.User.desktop\nBaseDirs.User.downloads\nBaseDirs.User.documents\nBaseDirs.User.music\nBaseDirs.User.pictures\nBaseDirs.User.videos\nBaseDirs.User.templates\nBaseDirs.User.public","category":"page"},{"location":"usage/#BaseDirs.User.desktop","page":"Usage","title":"BaseDirs.User.desktop","text":"desktop(parts...) -> String\n\nJoin the desktop directory with zero or more path components (parts).\n\nThe desktop directory is based on the variable BaseDirs.DESKTOP_DIR, which see.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.downloads","page":"Usage","title":"BaseDirs.User.downloads","text":"downloads(parts...) -> String\n\nJoin the downloads directory with zero or more path components (parts).\n\nThe downloads directory is based on the variable BaseDirs.DOWNLOADS_DIR, which see.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.documents","page":"Usage","title":"BaseDirs.User.documents","text":"documents(parts...) -> String\n\nJoin the documents directory with zero or more path components (parts).\n\nThe documents directory is based on the variable BaseDirs.DOCUMENTS_DIR, which see.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.music","page":"Usage","title":"BaseDirs.User.music","text":"music(parts...) -> String\n\nJoin the music directory with zero or more path components (parts).\n\nThe music directory is based on the variable BaseDirs.MUSIC_DIR, which see.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.pictures","page":"Usage","title":"BaseDirs.User.pictures","text":"pictures(parts...) -> String\n\nJoin the pictures directory with zero or more path components (parts).\n\nThe pictures directory is based on the variable BaseDirs.PICTURES_DIR, which see.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.videos","page":"Usage","title":"BaseDirs.User.videos","text":"videos(parts...) -> String\n\nJoin the videos directory with zero or more path components (parts).\n\nThe videos directory is based on the variable BaseDirs.VIDEOS_DIR, which see.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.templates","page":"Usage","title":"BaseDirs.User.templates","text":"templates(parts...) -> String\n\nJoin the templates directory with zero or more path components (parts).\n\nThe templates directory is based on the variable BaseDirs.TEMPLATES_DIR, which see.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.public","page":"Usage","title":"BaseDirs.User.public","text":"public(parts...) -> String\n\nJoin the public directory with zero or more path components (parts).\n\nThe public directory is based on the variable BaseDirs.PUBLIC_DIR, which see.\n\n\n\n\n\n","category":"function"},{"location":"usage/","page":"Usage","title":"Usage","text":"","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"BaseDirs.User.fonts\nBaseDirs.User.applications","category":"page"},{"location":"usage/#BaseDirs.User.fonts","page":"Usage","title":"BaseDirs.User.fonts","text":"fonts(; create, existent) -> Vector{String} # all directories\nfonts(parts...; create, existent) # all directories joined with parts\nfonts(proj::Project; create, existent) # all project-specific directories\nfonts(proj::Project, parts...; create, existent) # all project-specific directories joined with parts\n\nLocate all user fonts directories. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the user fonts directories as appropriate.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\nexistent::Bool (default false), filter out paths that do not exist.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.User.applications","page":"Usage","title":"BaseDirs.User.applications","text":"applications(; create, existent) -> Vector{String} # all directories\napplications(parts...; create, existent) # all directories joined with parts\napplications(proj::Project; create, existent) # all project-specific directories\napplications(proj::Project, parts...; create, existent) # all project-specific directories joined with parts\n\nLocate all user applications directories. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the user applications directories as appropriate.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\nexistent::Bool (default false), filter out paths that do not exist.\n\n\n\n\n\n","category":"function"},{"location":"usage/#System","page":"Usage","title":"System","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"BaseDirs.System\nBaseDirs.System.data\nBaseDirs.System.config\nBaseDirs.System.fonts\nBaseDirs.System.applications","category":"page"},{"location":"usage/#BaseDirs.System","page":"Usage","title":"BaseDirs.System","text":"BaseDirs.System\n\nThis module contains accessor functions for system directories.\n\nBase directory accessors\n\ndata, config -> Vector{String}\n\nOther accessors\n\nfonts and applications -> Vector{String}\n\n\n\n\n\n","category":"module"},{"location":"usage/#BaseDirs.System.data","page":"Usage","title":"BaseDirs.System.data","text":"data(; create, existent) -> Vector{String} # all directories\ndata(parts...; create, existent) # all directories joined with parts\ndata(proj::Project; create, existent) # all project-specific directories\ndata(proj::Project, parts...; create, existent) # all project-specific directories joined with parts\n\nLocate all system configuration directories. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the system configuration directories as appropriate.\n\nThe returned path is based on the variable BaseDirs.DATA_DIRS, which see.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\nexistent::Bool (default false), filter out paths that do not exist.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.System.config","page":"Usage","title":"BaseDirs.System.config","text":"config(; create, existent) -> Vector{String} # all directories\nconfig(parts...; create, existent) # all directories joined with parts\nconfig(proj::Project; create, existent) # all project-specific directories\nconfig(proj::Project, parts...; create, existent) # all project-specific directories joined with parts\n\nLocate all system configuration directories. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the system configuration directories as appropriate.\n\nThe returned path is based on the variable BaseDirs.CONFIG_DIRS, which see.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\nexistent::Bool (default false), filter out paths that do not exist.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.System.fonts","page":"Usage","title":"BaseDirs.System.fonts","text":"fonts(; create, existent) -> Vector{String} # all directories\nfonts(parts...; create, existent) # all directories joined with parts\nfonts(proj::Project; create, existent) # all project-specific directories\nfonts(proj::Project, parts...; create, existent) # all project-specific directories joined with parts\n\nLocate all system fonts directories. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the system fonts directories as appropriate.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\nexistent::Bool (default false), filter out paths that do not exist.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.System.applications","page":"Usage","title":"BaseDirs.System.applications","text":"applications(; create, existent) -> Vector{String} # all directories\napplications(parts...; create, existent) # all directories joined with parts\napplications(proj::Project; create, existent) # all project-specific directories\napplications(proj::Project, parts...; create, existent) # all project-specific directories joined with parts\n\nLocate all system applications directories. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the system applications directories as appropriate.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\nexistent::Bool (default false), filter out paths that do not exist.\n\n\n\n\n\n","category":"function"},{"location":"usage/#Combined","page":"Usage","title":"Combined","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"BaseDirs.data\nBaseDirs.config\nBaseDirs.fonts\nBaseDirs.applications","category":"page"},{"location":"usage/#BaseDirs.data","page":"Usage","title":"BaseDirs.data","text":"data(; create, existent) -> Vector{String} # all directories\ndata(parts...; create, existent) # all directories joined with parts\ndata(proj::Project; create, existent) # all project-specific directories\ndata(proj::Project, parts...; create, existent) # all project-specific directories joined with parts\n\nLocate all user and system configuration directories. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the user and system configuration directories as appropriate.\n\nThe returned path is based on the variables BaseDirs.DATA_HOME, and BaseDirs.DATA_DIRS, which see.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\nexistent::Bool (default false), filter out paths that do not exist.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.config","page":"Usage","title":"BaseDirs.config","text":"config(; create, existent) -> Vector{String} # all directories\nconfig(parts...; create, existent) # all directories joined with parts\nconfig(proj::Project; create, existent) # all project-specific directories\nconfig(proj::Project, parts...; create, existent) # all project-specific directories joined with parts\n\nLocate all user and system configuration directories. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the user and system configuration directories as appropriate.\n\nThe returned path is based on the variables BaseDirs.CONFIG_HOME, and BaseDirs.CONFIG_DIRS, which see.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\nexistent::Bool (default false), filter out paths that do not exist.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.fonts","page":"Usage","title":"BaseDirs.fonts","text":"fonts(; create, existent) -> Vector{String} # all directories\nfonts(parts...; create, existent) # all directories joined with parts\nfonts(proj::Project; create, existent) # all project-specific directories\nfonts(proj::Project, parts...; create, existent) # all project-specific directories joined with parts\n\nLocate all user and system fonts directories. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the user and system fonts directories as appropriate.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\nexistent::Bool (default false), filter out paths that do not exist.\n\n\n\n\n\n","category":"function"},{"location":"usage/#BaseDirs.applications","page":"Usage","title":"BaseDirs.applications","text":"applications(; create, existent) -> Vector{String} # all directories\napplications(parts...; create, existent) # all directories joined with parts\napplications(proj::Project; create, existent) # all project-specific directories\napplications(proj::Project, parts...; create, existent) # all project-specific directories joined with parts\n\nLocate all user and system applications directories. Optionally, a project and/or path components can be provided as arguments, in which case they are joined with the user and system applications directories as appropriate.\n\nKeyword arguments\n\ncreate::Bool (default false), whether the path should be created if it does not exist. Paths ending in / are interpreted as directories, and all other paths are considered files. This takes care to create the base directories with the appropriate permissions (700).\nexistent::Bool (default false), filter out paths that do not exist.\n\n\n\n\n\n","category":"function"},{"location":"others/#A-Survey-of-other-XDG-y-packages","page":"Prior Art","title":"A Survey of other XDG-y packages","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"The entire point of this package is to handle locations in a fairly standardised way. With this in mind, it seems fairly sensible to survey other notable XDG-y packages and see how them behave. Specifically, we will be looking at the following:","category":"page"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"(Go) xdg\n(Rust) directories-rs\n(Python) platform-dirs\n(Qt) QStandardPaths\nXDG Base Directory Specification","category":"page"},{"location":"others/#Base-directories","page":"Prior Art","title":"Base directories","text":"","category":"section"},{"location":"others/#Linux","page":"Prior Art","title":"Linux","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name EnvVar XDG spec QStandardPaths Go XDG Rust directories-rs Python platform-dirs\nUser data XDG_DATA_HOME ~/.local/share XDG spec XDG spec XDG spec XDG spec\nSystem data XDG_DATA_DIRS /usr/local/share, /usr/share XDG spec XDG spec ~/.local/share XDG spec\nUser config XDG_CONFIG_HOME ~/.config XDG spec XDG spec XDG spec XDG spec\nSystem config XDG_CONFIG_DIRS /etc/xdg XDG spec XDG spec - XDG spec\nState XDG_STATE_HOME ~/.local/state - XDG spec XDG spec XDG spec\nUser executables XDG_BIN_HOME [binhome] ~/.local/bin - - XDG spec -\nCache XDG_CACHE_HOME ~/.cache XDG spec XDG spec XDG spec XDG spec\nRuntime XDG_RUNTIME_DIR /run/user/$UID XDG spec XDG spec - XDG spec","category":"page"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"[binhome]: While XDG_BIN_HOME is not yet standard, it seems like the most likely name to be given to ~/.local/bin (see this issue), and I think it is worth having something rather than nothing.","category":"page"},{"location":"others/#MacOS","page":"Prior Art","title":"MacOS","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name EnvVar QStandardPaths Go XDG Rust directories-rs Python platform-dirs\nUser data XDG_DATA_HOME ~/Library/Application Support Qt Qt Qt\nSystem data XDG_DATA_DIRS /Library/Application Support Qt ~/Library/Application Support Qt\nUser config XDG_CONFIG_HOME ~/Library/Preferences ~/Library/Application Support Go XDG Qt\nSystem config XDG_CONFIG_DIRS ~/Library/Preferences ~/Library/Preferences, /Library/Application Support, /Library/Preferences - -\nState XDG_STATE_HOME - ~/Library/Application Support - Go XDG\nUser executables XDG_BIN_HOME [binhome] - - - -\nCache XDG_CACHE_HOME ~/Library/Caches/ , /Library/Caches Qt Qt Qt\nRuntime XDG_RUNTIME_DIR ~/Library/Application Support Qt - ~/Library/Caches/TemporaryItems","category":"page"},{"location":"others/#Windows","page":"Prior Art","title":"Windows","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Here folder names not beginning with ~ or / refer to Known Folders.","category":"page"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name EnvVar QStandardPaths Go XDG Rust directories-rs Python platform-dirs\nUser data XDG_DATA_HOME LocalAppData Qt Qt LocalAppData or RoamingAppData\nSystem data XDG_DATA_DIRS ProgramData RoamingAppData, ProgramData RoamingAppData ProgramData\nUser config XDG_CONFIG_HOME LocalAppData LocalAppData RoamingAppData LocalAppData or RoamingAppData\nSystem config XDG_CONFIG_DIRS ProgramData ProgramData, RoamingAppData - ProgramData\nState XDG_STATE_HOME - LocalAppData - LocalAppData\nUser executables XDG_BIN_HOME [binhome] - - - \nCache XDG_CACHE_HOME LocalAppData\\cache LocalAppData\\cache LocalAppData LocalAppData\\Cache\nRuntime XDG_RUNTIME_DIR ~ LocalAppData Go XDG LocalAppData\\Temp","category":"page"},{"location":"others/#User-directories","page":"Prior Art","title":"User directories","text":"","category":"section"},{"location":"others/#Linux-2","page":"Prior Art","title":"Linux","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name EnvVar XDG spec QStandardPaths Go XDG Rust directories-rs Python platform-dirs\nDesktop XDG_DESKTOP_DIR ~/Desktop XDG spec XDG spec - -\nDownload XDG_DOWNLOAD_DIR ~/Downloads XDG spec XDG spec - -\nDocuments XDG_DOCUMENTS_DIR ~/Documents XDG spec XDG spec - XDG spec\nMusic XDG_MUSIC_DIR ~/Music XDG spec XDG spec - -\nPictures XDG_PICTURES_DIR ~/Pictures XDG spec XDG spec - -\nVideos XDG_VIDEOS_DIR ~/Videos XDG spec XDG spec - -\nTemplates XDG_TEMPLATES_DIR ~/Templates - XDG spec - -\nPublic XDG_PUBLICSHARE_DIR ~/Public - XDG spec - -","category":"page"},{"location":"others/#MacOS-2","page":"Prior Art","title":"MacOS","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name EnvVar QStandardPaths Go XDG Rust directories-rs Python platform-dirs\nDesktop XDG_DESKTOP_DIR ~/Desktop Qt Qt -\nDownload XDG_DOWNLOAD_DIR ~/Downloads Qt Qt -\nDocuments XDG_DOCUMENTS_DIR ~/Document Qt Qt Qt\nMusic XDG_MUSIC_DIR ~/Music Qt Qt -\nPictures XDG_PICTURES_DIR ~/Pictures Qt Qt -\nVideos XDG_VIDEOS_DIR ~/Movies Qt Qt -\nTemplates XDG_TEMPLATES_DIR - ~/Template Go XDG -\nPublic XDG_PUBLICSHARE_DIR - ~/Public Go XDG -","category":"page"},{"location":"others/#Windows-2","page":"Prior Art","title":"Windows","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name EnvVar Go XDG Rust directories-rs Python platform-dirs\nDesktop XDG_DESKTOP_DIR Desktop Go XDG -\nDownload XDG_DOWNLOAD_DIR Downloads Go XDG -\nDocuments XDG_DOCUMENTS_DIR Documents Go XDG Go XDG\nMusic XDG_MUSIC_DIR Music Go XDG -\nPictures XDG_PICTURES_DIR Pictures Go XDG -\nVideos XDG_VIDEOS_DIR Videos Go XDG -\nTemplates XDG_TEMPLATES_DIR Templates Go XDG -\nPublic XDG_PUBLICSHARE_DIR Public Go XDG -","category":"page"},{"location":"others/#Project-directories","page":"Prior Art","title":"Project directories","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Here $PP will be a stand-in for the project path, according to the conventions of the OS.","category":"page"},{"location":"others/#Linux-3","page":"Prior Art","title":"Linux","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name QStandardPaths Rust directories-rs\nUser data $(User data)/$PP $(User data)/$PP\nSystem data $(System data)/$PP $(User data)/$PP\nUser config $(User config)/$PP $(User config)/$PP\nSystem config $(System config)/$PP -\nCache $(Cache)/$PP $(Cache)/$PP\nState - $(State)/$PP","category":"page"},{"location":"others/#MacOS-3","page":"Prior Art","title":"MacOS","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name QStandardPaths Rust directories-rs\nUser data $(User data)/$PP $(User data)/$PP\nSystem data $(System data)/$PP $(User data)/$PP\nUser config $(User config)/$PP $(User config)/$PP\nSystem config - -\nCache $(Cache)/$PP $(Cache)/$PP\nState - -","category":"page"},{"location":"others/#Windows-3","page":"Prior Art","title":"Windows","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name QStandardPaths Rust directories-rs\nUser data $(User data)\\$PP $(User data)\\$PP\\data\nSystem data $(System data)\\$PP $(User data)\\$PP\\data\nUser config $(User config)\\$PP $(User config)\\$PP\\config\nSystem config $(System config)\\$PP -\nCache $(Cache)\\$PP $(Cache)\\$PP\\cache\nState - -","category":"page"},{"location":"others/#Extra-directories","page":"Prior Art","title":"Extra directories","text":"","category":"section"},{"location":"others/#Linux-4","page":"Prior Art","title":"Linux","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name QStandardPaths Go XDG Rust directories-rs Python platform-dirs\nFonts ~/.fonts, $(User/System data)/fonts Qt ~/.local/share/fonts -\nApplications $(User/System data)/applications Qt - -","category":"page"},{"location":"others/#MacOS-4","page":"Prior Art","title":"MacOS","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name QStandardPaths Go XDG Rust directories-rs Python platform-dirs\nFonts /System/Library/Fonts ~/Library/Fonts, /Library/Fonts, /System/Library/Fonts, /Network/Library/Fonts ~/Library/Fonts -\nApplications /Applications Qt - -","category":"page"},{"location":"others/#Windows-4","page":"Prior Art","title":"Windows","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Common Name QStandardPaths Go XDG Rust directories-rs Python platform-dirs\nFonts Fonts Qt - -\nApplications RoamingAppData, Programs Programs, CommonPrograms - -","category":"page"},{"location":"others/#Discrepancies","page":"Prior Art","title":"Discrepancies","text":"","category":"section"},{"location":"others/#Base-directories-2","page":"Prior Art","title":"Base directories","text":"","category":"section"},{"location":"others/#MacOS-5","page":"Prior Art","title":"MacOS","text":"","category":"section"},{"location":"others/#User-configuration","page":"Prior Art","title":"User configuration","text":"","category":"section"},{"location":"others/#The-conflict","page":"Prior Art","title":"The conflict","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"directories-rs uses ~/Library/Preferences while all the other implementations use ~/Library/Application support.","category":"page"},{"location":"others/#Resolution","page":"Prior Art","title":"Resolution","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Looking at Table 1.3 of Apple's Standard Directory Guidelines, it says of ~/Library/Preferences that \"You should not create files in this directory yourself. Instead, use the NSUserDefaults class or CFPreferences API to get and set preference values for your app.\" (wnich I interpret as \"don't touch directly\"), and of ~/Library/Application Support that \"Use this directory to store all app data files except those associated with the userâ€™s documents\". Given the intended use of this package is to procure the correct locations to read/write files to, ~/Library/Application Support is thus the more appropriate choice.","category":"page"},{"location":"others/#System-configuration","page":"Prior Art","title":"System configuration","text":"","category":"section"},{"location":"others/#The-conflict-2","page":"Prior Art","title":"The conflict","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Qt uses ~/Library/Preferences, while Go XDG uses ~/Library/Preferences, /Library/Application Support, and /Library/Preferences. The other implementations do not declare a MacOS system configuration directory.","category":"page"},{"location":"others/#Resolution-2","page":"Prior Art","title":"Resolution","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"For the aforementioned reasons with User configuration on MacOS, the Preferences folder does not seem appropriate, which leaves /Library/Application Support.","category":"page"},{"location":"others/#User-executables","page":"Prior Art","title":"User executables","text":"","category":"section"},{"location":"others/#The-conflict-3","page":"Prior Art","title":"The conflict","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"MacOS does not have a standard directory for user executables.","category":"page"},{"location":"others/#Resolution-3","page":"Prior Art","title":"Resolution","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Look for the common manually specified \"local executable folder\" paths (~/.local/bin/, /opt/local/bin) on the path, and if none of them are found fall back on the system executable folder /usr/local/bin.","category":"page"},{"location":"others/#Runtime","page":"Prior Art","title":"Runtime","text":"","category":"section"},{"location":"others/#The-conflict-4","page":"Prior Art","title":"The conflict","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"MacOS simply has no direct equivalent of the XDG runtime directory. Thus, we must choose which aspect of the runtime directory we think is more important: the transient-ness, or the association with the application. Qt and Go XDG pick the lattter, but Python's platform-dirs picks the latter.","category":"page"},{"location":"others/#Resolution-4","page":"Prior Art","title":"Resolution","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Since in the XDG spec the runtime directory is a collection of all application's runtime files which is held in-memory, a temporary directory seems to make the most sense in this regard. However, while the runtime directory's contents are transient, then might not be able to be safely deleted on a whim, which is one of the usual assumptions made about the contents of a temporary directory.","category":"page"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"There is no clear option here, but I will prioritise avoiding putting fragile files in a temporary directory, and so we will go with ~/Library/Application Support.","category":"page"},{"location":"others/#Windows-5","page":"Prior Art","title":"Windows","text":"","category":"section"},{"location":"others/#Roaming-vs-Local-app-data","page":"Prior Art","title":"Roaming vs Local app data","text":"","category":"section"},{"location":"others/#The-conflict-5","page":"Prior Art","title":"The conflict","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Across the data and configuration folders, there is general contention around whether RoamingAppData or AppData should be used. The difference seems to relate to DomainController and ActiveDirectory â€” simply put data in RoamingAppData will follow the user around, while AppData won't. The idea is that \"less essential but potentially large\" information goes in AppData.","category":"page"},{"location":"others/#Resolution-5","page":"Prior Art","title":"Resolution","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"I think configuration should follow the user around, and if data can be stored locally because it's not essential, then that's what the cache is for. So, RoamingAppData will be used for everything but State, Cache, and Runtime.","category":"page"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"In there is demand in the future, a local::Bool keyword argument could be added to support both modes of operaton.","category":"page"},{"location":"others/#Executable-files","page":"Prior Art","title":"Executable files","text":"","category":"section"},{"location":"others/#The-conflict-6","page":"Prior Art","title":"The conflict","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Windows doesn't have anywhere that user executable files are supposed to go.","category":"page"},{"location":"others/#Resolution-6","page":"Prior Art","title":"Resolution","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Like with MacOS, check for locations that users seem to use for this purpose which are also on the path, namely ~\\bin, RoamingAppData\\bin, and AppData\\bin. If none of these exist, use the current working directory as at least that way the provided path will be callable in the state at the time.","category":"page"},{"location":"others/#User-directories-2","page":"Prior Art","title":"User directories","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"No conflicts ðŸŽ‰.","category":"page"},{"location":"others/#Project-directories-2","page":"Prior Art","title":"Project directories","text":"","category":"section"},{"location":"others/#Windows-AppData-project-suffixes","page":"Prior Art","title":"Windows AppData project suffixes","text":"","category":"section"},{"location":"others/#The-conflict-7","page":"Prior Art","title":"The conflict","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Some projects just use AppData\\$Project for the data, config, and cache folders, however directories-rs adds suffixes after the project.","category":"page"},{"location":"others/#Resolution-7","page":"Prior Art","title":"Resolution","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"There's no formally specified structure, and conventions in usage are loose, so we may as well decide on a more structured approach, and use suffix directories.","category":"page"},{"location":"others/#Extra-directories-2","page":"Prior Art","title":"Extra directories","text":"","category":"section"},{"location":"others/#A-collection-of-different-directories","page":"Prior Art","title":"A collection of different directories","text":"","category":"section"},{"location":"others/#The-conflict-8","page":"Prior Art","title":"The conflict","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Some packages only have one or two Application/Font directories, other have many.","category":"page"},{"location":"others/#Resolution-8","page":"Prior Art","title":"Resolution","text":"","category":"section"},{"location":"others/","page":"Prior Art","title":"Prior Art","text":"Since these will primarily be used for searching, it makes sense to include all valid paths.","category":"page"},{"location":"#BaseDirs","page":"Introduction","title":"BaseDirs","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This package exists to help you put and look for files in the appropriate place(s).","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"It is essentially an implementation of the XDG (Cross-Desktop Group) directory specifications, with analogues for Windows and MacOS for cross-platform. More specifically, this is a hybrid of:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"The XDG base directory and the XDG user directory specifications on Linux\nThe Known Folder API on Windows\nThe Standard Directories guidelines on macOS","category":"page"},{"location":"#Why-should-I-care?","page":"Introduction","title":"Why should I care?","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"It may be easy to treat file paths haphazardly, but for the user in particular abiding by the standards/conventions of the their platform has a number of major benefits, such as:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Improved ease of backups, since it is easier to make rules for which folders need to be backed up.\nImproved configuration portability, since it is easier to identify and share the relevant configuration files.\nEase of isolating application state, by containing state to a single directory it is easy to avoid sharing it.\nDecreased reliance on hard-coded paths, improving flexibility and composability.","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"It is worth noting that these considerations apply to both graphical and command-line desktop applications.","category":"page"},{"location":"#Choosing-the-appropriate-base-directory","page":"Introduction","title":"Choosing the appropriate base directory","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"(Image: image)","category":"page"}]
}
